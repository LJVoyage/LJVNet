name: Publish LJVoyage Network

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      # 更新 ljvtoolkit 依赖
      - name: Update ljvtoolkit dependency to latest
        run: |
          echo "🔍 Fetching latest LJVToolkit version..."
          LJV_VER=$(git ls-remote --tags https://github.com/LJVoyage/LJVToolkit.git | grep -o 'refs/tags/v[0-9.]*' | sort -V | tail -n 1 | sed 's/refs\/tags\/v//')
          echo "Found latest: $LJV_VER"
          node -e "let fs=require('fs');let p=require('./package.json');p.dependencies['com.ljvoyage.ljvtoolkit']='${LJV_VER}';fs.writeFileSync('./package.json', JSON.stringify(p,null,2));"

      # 同步当前包版本（去掉 v）
      - name: Sync package.json version with tag
        run: |
          TAG_VER=${GITHUB_REF_NAME#v}
          echo "🔄 Syncing package.json version to $TAG_VER ..."
          node -e "let fs=require('fs');let p=require('./package.json');p.version='${TAG_VER}';fs.writeFileSync('./package.json', JSON.stringify(p,null,2));"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add package.json
          git commit -m "chore: sync version and dependency" || echo "No changes to commit"
          git push origin HEAD:main

      # 验证
      - name: Verify version
        run: |
          PKG_VER=$(node -p "require('./package.json').version")
          TAG_VER=${GITHUB_REF_NAME#v}
          [ "$PKG_VER" = "$TAG_VER" ] && echo "✅ Version OK" || exit 1

      # 创建 Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "LJVoyage Network ${{ github.ref_name }}"
          body: "Auto-generated release for ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 通知 OpenUPM
      - name: Trigger OpenUPM build
        run: |
          PACKAGE_NAME="com.ljvoyage.network"
          echo "🚀 Triggering OpenUPM build for ${PACKAGE_NAME}"
          curl -X POST https://package.openupm.com/api/builds \
            -H "Content-Type: application/json" \
            -d "{\"packageName\": \"${PACKAGE_NAME}\"}"
